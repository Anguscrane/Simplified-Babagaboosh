import tkinter as tk
from tkinter import scrolledtext
import cohere
import elevenlabs
from elevenlabs.client import ElevenLabs
import requests
import pygame
import random
import string
import time

client = ElevenLabs(
    api_key="PLACEHOLDER"
)

#Location for custom prompt file to be added
custom_prompt_file = PLACEHOLDER

#Wake-phrase definition
wake_phrase = PLACEHOLDER

#Model (turbo recommended)
model = "eleven_turbo_v2"

#Voice ID
VOICE_ID = 'PLACEHOLDER'
#Kade Murdock 2.0 or Val 3.0 are good free ones

#API Key
API_KEY = 'PLACEHOLDER'

# Initialize the history variable to store the question-answer pairs
History = []

# Maximum number of entries to keep in history
MAX_HISTORY_ENTRIES = 15

# Timer duration in milliseconds (3000ms = 3 seconds)
TIMER_DURATION = 500

# Variable to keep track of the last recorded text
last_text = ""

# Variable to store the timer ID
timer_id = None

# Variable to store the time of the last message sent
last_message_time = None

# Duration in seconds after which the wake-word is required
WAKE_WORD_TIMEOUT = 15

def check_text_area():
    global last_text, timer_id, last_message_time
    current_text = text_area.get("1.0", "end-1c")
    if current_text != last_text:
        last_text = current_text
        if timer_id:
            app.after_cancel(timer_id)  # Cancel the previous timer
        timer_id = app.after(TIMER_DURATION, save_text)

def save_text():
    global last_text, History, last_message_time
    text_to_save = ""  # Initialize text_to_save with a default value
    if last_text and last_text.strip():
        if wake_phrase in last_text or (last_message_time and time.time() - last_message_time < WAKE_WORD_TIMEOUT):
            text_to_save = last_text.replace(wake_phrase, "").strip()  # Remove wake_phrase prefix and leading/trailing whitespace
            if len(History) == MAX_HISTORY_ENTRIES:
                # If history is full, remove the oldest entry
                History.pop(0)
            # Add the current text as a new row in history, initializing the answer as an empty string
            History.append([text_to_save, ""])
            print("Text saved to History:", text_to_save)
            print("History:", History)  # Print the entire history list
            CohereSend(text_to_save)  # Call CohereSend only if text_to_save is assigned
            last_message_time = time.time()  # Update the last message time
    # Clear the text box
    text_area.delete("1.0", "end")

app = tk.Tk()
app.title("Activated Text")

text_area = scrolledtext.ScrolledText(app, wrap=tk.WORD, width=40, height=10)
text_area.pack(padx=10, pady=10)

# Schedule the check_text_area function to run periodically
def periodic_check():
    check_text_area()
    app.after(10, periodic_check)  # Check every 10 milliseconds

def CohereSend(message_most_recent):
    co = cohere.Client('PLACEHOLDER')
    
    # Prepare chat history for Cohere APIPalace avenue work  
    chat_history = [{"role": "USER", "message": entry[0]} if entry[1] == "" else {"role": "CHATBOT", "message": entry[1]} for entry in History]
    
    # Read custom prompt from the file using the full path
    with open(custom_prompt_file, "r") as file:
        custom_prompt = file.read()
    
    response = co.chat(
        chat_history=chat_history,
        message=message_most_recent,
        preamble=custom_prompt
    )
    print("Cohere response:", response.text)
    update_history_with_answer(message_most_recent, response.text)
    elevenlabsShit(response.text)

def update_history_with_answer(question, answer):
    global History
    for entry in History:
        if entry[0] == question:
            entry[1] = answer
            break
    print("Updated History:", History)

def elevenlabsShit(textParam):
    TEXT = textParam
    
    # Generate a unique file name
    random_string = ''.join(random.choices(string.digits, k=6))
    OUTPUT_FILE = f'output_{random_string}.mp3'
    
    # Request headers
    headers = {
        "Accept": "audio/mpeg",
        "Content-Type": "application/json",
        "xi-api-key": API_KEY
    }

    # Request data
    data = {
        "text": TEXT,
        "model_id": model,
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.5
        }
    }
    # Make the POST request
    response = requests.post(f"https://api.elevenlabs.io/v1/text-to-speech/{VOICE_ID}", json=data, headers=headers)

    # Check if the request was successful
    if response.status_code == 200:
        # Write the content to an MP3 file
        with open(OUTPUT_FILE, 'wb') as f:
            f.write(response.content)
        print(f"MP3 file saved as {OUTPUT_FILE}")

        # Initialize pygame mixer
        pygame.mixer.init()

        # Load the MP3 file
        pygame.mixer.music.load(OUTPUT_FILE)

        # Play the MP3 file
        pygame.mixer.music.play()

        # Keep the script running until the music finishes
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
    else:
        print(f"Failed to generate speech: {response.status_code}, {response.text}")

# Start the periodic check
periodic_check()

app.mainloop()
